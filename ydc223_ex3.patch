diff --git a/ex3/README.txt b/ex3/README.txt
index 5eda569..6e44b37 100644
--- a/ex3/README.txt
+++ b/ex3/README.txt
@@ -2,10 +2,16 @@
 
 # TODO: document how to invoke protoc in order to generate the stubs in your
 # language of choice.
-# YOUR INSTRUCTIONS GO HERE
+python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. debate.proto 
+python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. consultation.proto 
 
 # TODO: document how to build your server and client code (if applicable)
-# YOUR INSTRUCTIONS GO HERE
+N/A
 
 # TODO: document how run your server (on localhost)
-# YOUR INSTRUCTIONS GO HERE
+python candidate_server.py 
+
+# How to run client
+python moderator <answer | elaborate> “question” [blah_run...]
+
+(My client is in python since in the assignment it said that it must take certain arhuments, but it didn't say it must be envoked with ./)
diff --git a/ex3/candidate_server.py b/ex3/candidate_server.py
new file mode 100644
index 0000000..c0dab42
--- /dev/null
+++ b/ex3/candidate_server.py
@@ -0,0 +1,50 @@
+from concurrent import futures
+import time
+import grpc
+import debate_pb2
+import debate_pb2_grpc
+import random
+import consultation_pb2_grpc
+import consultation_pb2
+
+_ONE_DAY_IN_SECONDS = 60 * 60 * 24
+replies = ["your 3 cent titanium tax goes too far", "your 3 cent titanium tax doesn't go too far enough"]
+
+class Candidate(debate_pb2_grpc.CandidateServicer):
+    def Answer(self, request, context):
+	if(request.question.lower().startswith(("what", "why", "how", "who", "when"))):
+		ques_sub = request.question.lower().replace("your", "my")
+		ques_sub = ques_sub.replace("you", "I")
+        	with grpc.insecure_channel('23.236.49.28:50051') as channel:
+        		stub = consultation_pb2_grpc.CampaignManagerStub(channel)
+        		retort = stub.Retort(consultation_pb2.RetortRequest(original_question=request.question))
+		ans = "You asked me " + ques_sub + " but I want to say that " + retort.retort
+		return debate_pb2.AnswerReply(answer=ans)
+	else:
+		return debate_pb2.AnswerReply(answer=replies[random.randint(0,1)])
+
+    def Elaborate(self, request, context):
+	blahs = request.blah_run
+	ans = ""
+	for i in range(len(blahs)):
+		num_blahs = blahs[i]
+		occur = 0
+		while(occur < num_blahs):
+			ans += "blah "
+			occur +=1
+		if(i != len(blahs)-1 or len(blahs) == 1):
+			ans += request.topic + " " 
+        return debate_pb2.ElaborateReply(answer=ans)
+
+def serve():
+    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
+    debate_pb2_grpc.add_CandidateServicer_to_server(Candidate(), server)
+    server.add_insecure_port('[::]:30000')
+    server.start()
+    try:
+        while True:
+            time.sleep(_ONE_DAY_IN_SECONDS)
+    except KeyboardInterrupt:
+        server.stop(0)
+if __name__ == '__main__':
+    serve()
diff --git a/ex3/debate.proto b/ex3/debate.proto
new file mode 100644
index 0000000..0e16a79
--- /dev/null
+++ b/ex3/debate.proto
@@ -0,0 +1,29 @@
+syntax = "proto3";
+
+service Candidate {
+  // Answer method.
+  rpc Answer(AnswerRequest) returns (AnswerReply) {}
+  rpc Elaborate(ElaborateRequest) returns (ElaborateReply) {}
+}
+
+// The request for answer.
+message AnswerRequest {
+  // The original question that was posted to the candidate.
+  string question = 1;
+}
+
+// The answer for answer.
+message AnswerReply {
+  string answer = 1;
+}
+
+// The request for elaborate.
+message ElaborateRequest {
+  string topic = 1;
+  repeated int32 blah_run = 2;
+}
+
+// The answer for answer.
+message ElaborateReply {
+  string answer = 1;
+}
diff --git a/ex3/moderator b/ex3/moderator
new file mode 100644
index 0000000..fee97b9
--- /dev/null
+++ b/ex3/moderator
@@ -0,0 +1,24 @@
+from __future__ import print_function
+import grpc
+import debate_pb2
+import debate_pb2_grpc
+import sys
+def run():
+    # NOTE(gRPC Python Team): .close() is possible on a channel and should be
+    # used in circumstances in which the with statement does not fit the needs
+    # of the code.
+    with grpc.insecure_channel('localhost:30000') as channel:
+	stub = debate_pb2_grpc.CandidateStub(channel)
+        if(str(sys.argv[1]) == "answer"):
+		q = sys.argv[2]
+		response = stub.Answer(debate_pb2.AnswerRequest(question=q))
+	else:
+		argInd = 3
+		elReq = debate_pb2.ElaborateRequest(topic=sys.argv[2])
+		while(argInd < len(sys.argv)):
+			elReq.blah_run.append(int(sys.argv[argInd]))
+			argInd+=1 
+		response = stub.Elaborate(elReq)
+	print(response.answer)
+if __name__ == '__main__':
+    run()
